_IOSTInstruction_counter.incr(6.5);const CASTLE_TOKEN = 'es_cn_castle_05';
_IOSTInstruction_counter.incr(6.1);const EVERGOLD_TOKEN = 'es_evergold';
_IOSTInstruction_counter.incr(207);class CastleToken {
    init() {
        _IOSTInstruction_counter.incr(13.6);storage.put('castle_price', '1000');
        _IOSTInstruction_counter.incr(13.299999999999999);storage.put('cooldownTime', '0');
        _IOSTInstruction_counter.incr(13.299999999999999);storage.put('castle_count', '0');
    }
    can_update(data) {
        _IOSTInstruction_counter.incr(18.6);return blockchain.requireAuth(blockchain.contractOwner(), 'active');
    }
    setAdmin(account) {
        _IOSTInstruction_counter.incr(18.6);this._requireAuth(blockchain.contractOwner(), 'active');
        _IOSTInstruction_counter.incr(11.2);storage.put('adminAccount', account);
    }
    setGameContract(contract) {
        _IOSTInstruction_counter.incr(18.6);this._requireAuth(blockchain.contractOwner(), 'active');
        _IOSTInstruction_counter.incr(11.2);storage.put('gameContract', contract);
    }
    create() {
        _IOSTInstruction_counter.incr(18.6);this._requireAuth(blockchain.contractOwner(), 'active');
        _IOSTInstruction_counter.incr(24.2);blockchain.callWithAuth('token721.iost', 'create', [
            CASTLE_TOKEN,
            blockchain.contractName(),
            21000000
        ]);
    }
    issue(width, depth, oid) {
        _IOSTInstruction_counter.incr(7.699999999999999);const metaData = { name: 'Castle' };
        _IOSTInstruction_counter.incr(11);let buyer = this._getOAAAccount(oid);
        _IOSTInstruction_counter.incr(14.2);const price = storage.get('castle_price');
        _IOSTInstruction_counter.incr(14.2);const adminAccount = storage.get('adminAccount');
        _IOSTInstruction_counter.incr(34);blockchain.callWithAuth('token.iost', 'transfer', [
            EVERGOLD_TOKEN,
            blockchain.publisher(),
            adminAccount,
            price,
            _IOSTBinaryOp(oid, ' Bought a castle', '+')
        ]);
        _IOSTInstruction_counter.incr(35.1);const res = blockchain.callWithAuth('token721.iost', 'issue', [
            CASTLE_TOKEN,
            blockchain.publisher(),
            JSON.stringify(metaData)
        ]);
        _IOSTInstruction_counter.incr(7);const tokenID = res[0];
        _IOSTInstruction_counter.incr(19.700000000000003);const info = {
            tokenID: tokenID,
            name: _IOSTBinaryOp('CASTLE#', tokenID, '+'),
            width: width,
            depth: depth,
            price: Number(price),
            level: 1,
            exp: 0,
            readyTime: 0,
            tryCount: 0,
            winCount: 0,
            lossCount: 0,
            levelPoint: 0,
            reward: 0,
            traps: [],
            logs: [],
            isReady: true,
            owner: buyer
        };
        _IOSTInstruction_counter.incr(8);this._putInfo(tokenID, info);
        _IOSTInstruction_counter.incr(14.2);let count = this._get('castle_count');
        _IOSTInstruction_counter.incr(9.1);count = _IOSTBinaryOp(count, 1, '+');
        _IOSTInstruction_counter.incr(11.2);this._put('castle_count', count);
        _IOSTInstruction_counter.incr(3.1);let castles = [];
        if (_IOSTInstruction_counter.incr(11.6),storage.mapHas('castles_by_owner', buyer)) {
            _IOSTInstruction_counter.incr(14.6);castles = this._mapGet('castles_by_owner', buyer);
        }
        _IOSTInstruction_counter.incr(8);castles.unshift(tokenID);
        _IOSTInstruction_counter.incr(11.6);this._mapPut('castles_by_owner', buyer, castles);
        return tokenID;
    }
    setName(castleid, name, oid) {
        _IOSTInstruction_counter.incr(8);this._checkAuth(castleid, oid);
        _IOSTInstruction_counter.incr(11);const info = this._getInfo(castleid);
        _IOSTInstruction_counter.incr(7);info.name = name;
        _IOSTInstruction_counter.incr(8);this._putInfo(castleid, info);
    }
    setPrice(price) {
        _IOSTInstruction_counter.incr(18.6);this._requireAuth(blockchain.contractOwner(), 'active');
        _IOSTInstruction_counter.incr(11.2);this._put('castle_price', price);
    }
    fix() {
        _IOSTInstruction_counter.incr(18.6);this._requireAuth(blockchain.contractOwner(), 'active');
        _IOSTInstruction_counter.incr(14.2);let count = this._get('castle_count');
        _IOSTInstruction_counter.incr(3);for (let i = 0; _IOSTInstruction_counter.incr(6.1),_IOSTBinaryOp(i, count, '<'); _IOSTInstruction_counter.incr(9.1),i = _IOSTBinaryOp(i, 1, '+')) {_IOSTInstruction_counter.incr(1);
            _IOSTInstruction_counter.incr(11);const info = this._getInfo(i);
            _IOSTInstruction_counter.incr(27.2);const res = blockchain.callWithAuth('token721.iost', 'ownerOf', [
                CASTLE_TOKEN,
                i.toString()
            ]);
            _IOSTInstruction_counter.incr(11);info.owner = res[0];
            _IOSTInstruction_counter.incr(8);this._putInfo(i, info);
        }
    }
    putInfo(castleid, infoStr) {
        _IOSTInstruction_counter.incr(14.2);const gameContract = storage.get('gameContract');
        _IOSTInstruction_counter.incr(10.6);this._requireAuth(gameContract, 'active');
        _IOSTInstruction_counter.incr(11.799999999999999);const key = _IOSTBinaryOp('castle_', castleid, '+');
        _IOSTInstruction_counter.incr(8);storage.put(key, infoStr);
    }
    _getOAAAccount(oid) {
        _IOSTInstruction_counter.incr(11);let account = blockchain.publisher();
        if (_IOSTInstruction_counter.incr(8.3),_IOSTBinaryOp(oid, '', '!==')) {
            _IOSTInstruction_counter.incr(25.300000000000004);account = _IOSTBinaryOp(_IOSTBinaryOp(blockchain.publisher(), ':', '+'), oid, '+');
        }
        return account;
    }
    _getInfo(castleid) {
        _IOSTInstruction_counter.incr(16.8);return this._get(_IOSTBinaryOp('castle_', castleid, '+'));
    }
    _putInfo(castleid, info) {
        _IOSTInstruction_counter.incr(16.8);this._put(_IOSTBinaryOp('castle_', castleid, '+'), info);
    }
    _get(k) {
        _IOSTInstruction_counter.incr(11);const val = storage.get(k);
        if (_IOSTInstruction_counter.incr(8.3),_IOSTBinaryOp(val, '', '===')) {
            return null;
        }
        _IOSTInstruction_counter.incr(8);return JSON.parse(val);
    }
    _put(k, v, p) {
        _IOSTInstruction_counter.incr(16);storage.put(k, JSON.stringify(v), p);
    }
    _mapGet(k, f) {
        _IOSTInstruction_counter.incr(11);const val = storage.mapGet(k, f);
        if (_IOSTInstruction_counter.incr(8.3),_IOSTBinaryOp(val, '', '===')) {
            return null;
        }
        _IOSTInstruction_counter.incr(8);return JSON.parse(val);
    }
    _mapPut(k, f, v, p) {
        _IOSTInstruction_counter.incr(16);storage.mapPut(k, f, JSON.stringify(v), p);
    }
    _checkAuth(castleid, oid) {
        _IOSTInstruction_counter.incr(11);const accout = this._getOAAAccount(oid);
        _IOSTInstruction_counter.incr(11);const info = this._getInfo(castleid);
        if (_IOSTInstruction_counter.incr(10.3),_IOSTBinaryOp(info.owner, accout, '!==')) {
            _IOSTInstruction_counter.incr(67.5);throw new Error(_IOSTBinaryOp('invalid owner ', account, '+'));
        }
    }
    _requireAuth(account, permission) {
        _IOSTInstruction_counter.incr(11);const ret = blockchain.requireAuth(account, permission);
        if (_IOSTInstruction_counter.incr(6.3),_IOSTBinaryOp(ret, true, '!==')) {
            _IOSTInstruction_counter.incr(68.8);throw new Error(_IOSTBinaryOp('require auth failed. ret = ', ret, '+'));
        }
    }
}
_IOSTInstruction_counter.incr(7);module.exports = CastleToken;